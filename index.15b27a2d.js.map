{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,SAAS,EAAgB,CAAI,EAC3B,MAAO,CAAE,EAAK,OAAO,CAAC,IAAK,IAAI,OAAO,CAAC,IAAK,GAC9C,CAEA,I,EAAM,EAAY,SAAS,aAAa,CAAC,SAEnC,EAAY,SAAS,aAAa,CAAC,SAInC,EAAY,A,C,A,C,S,C,E,G,M,O,C,G,O,E,E,C,E,EAFF,SAAS,gBAAgB,CAAC,Q,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,G,E,I,A,W,M,A,U,wI,G,EAEX,MAAM,CAAC,GAEtC,EAAU,GAAG,GAEb,EAAU,gBAAgB,CAAC,QAAS,SAAA,CAApC,EACE,OAAQ,EAAE,MAAM,CAAC,SAAS,EACxB,IAAK,SACH,EAAU,IAAI,CAAC,SAAC,CAAA,CAAW,CAA3B,EACE,OAAO,EAAgB,EAAU,QAAQ,CAAC,EAAE,CAAC,SAAS,EAClD,EAAgB,EAAU,QAAQ,CAAC,EAAE,CAAC,SAAS,EAAI,EAAI,EAC7D,GACA,KAEF,KAAK,MACH,EAAU,IAAI,CAAC,SAAC,CAAA,CAAW,CAA3B,EACE,MAAO,CAAC,EAAU,QAAQ,CAAC,EAAE,CAAC,SAAS,CACnC,CAAC,EAAU,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAG,EAAI,EAC7C,GACA,KAEF,KAAK,WACH,EAAU,IAAI,CAAC,SAAC,CAAA,CAAW,CAA3B,EACE,OAAO,EAAU,QAAQ,CAAC,EAAE,CAAC,SAAS,CACnC,aAAa,CAAC,EAAU,QAAQ,CAAC,EAAE,CAAC,SAAS,CAClD,GACA,KAEF,KAAK,OACH,EAAU,IAAI,CAAC,SAAC,CAAA,CAAW,CAA3B,EACE,OAAO,EAAU,QAAQ,CAAC,EAAE,CAAC,SAAS,CACnC,aAAa,CAAC,EAAU,QAAQ,CAAC,EAAE,CAAC,SAAS,CAClD,EAEJ,CAEA,EAAU,SAAS,CAAI,WAQP,MAAA,CAPV,EAAU,GAAG,CAAC,SAAA,CADpB,EAC+B,MAAC,iCAGlB,MAAA,CADA,EAAQ,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,yBAE9B,MAAA,CADA,EAAQ,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,yBAE9B,MAAA,CADA,EAAQ,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,yBACA,MAAA,CAA9B,EAAQ,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,+BAErC,GAAA,IAAI,CAAC,IAAI,SAElB,E,4D","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nfunction convertToNumber(text) {\n    return +text.replace(\"$\", \"\").replace(\",\", \"\");\n}\nvar tableHead = document.querySelector(\"thead\");\nvar tableBody = document.querySelector(\"tbody\");\nvar allRows = document.querySelectorAll(\"tr\");\nvar employees = _to_consumable_array(allRows).splice(1);\nemployees.pop();\ntableHead.addEventListener(\"click\", function(e) {\n    switch(e.target.innerText){\n        case \"Salary\":\n            employees.sort(function(employee1, employee2) {\n                return convertToNumber(employee1.children[3].innerText) > convertToNumber(employee2.children[3].innerText) ? 1 : -1;\n            });\n            break;\n        case \"Age\":\n            employees.sort(function(employee1, employee2) {\n                return +employee1.children[2].innerText > +employee2.children[2].innerText ? 1 : -1;\n            });\n            break;\n        case \"Position\":\n            employees.sort(function(employee1, employee2) {\n                return employee1.children[1].innerText.localeCompare(employee2.children[1].innerText);\n            });\n            break;\n        case \"Name\":\n            employees.sort(function(employee1, employee2) {\n                return employee1.children[0].innerText.localeCompare(employee2.children[0].innerText);\n            });\n            break;\n    }\n    tableBody.innerHTML = \"\\n      \".concat(employees.map(function(element) {\n        return \"\\n        <tr>\\n          <td>\".concat(element.children[0].innerText, \"</td>\\n          <td>\").concat(element.children[1].innerText, \"</td>\\n          <td>\").concat(element.children[2].innerText, \"</td>\\n          <td>\").concat(element.children[3].innerText, \"</td>\\n        </tr>\\n      \");\n    }).join(\"\"), \"\\n    \");\n});\n\n//# sourceMappingURL=index.15b27a2d.js.map\n","'use strict';\n\nfunction convertToNumber(text) {\n  return +(text.replace('$', '').replace(',', ''));\n}\n\nconst tableHead = document.querySelector('thead');\n\nconst tableBody = document.querySelector('tbody');\n\nconst allRows = document.querySelectorAll('tr');\n\nconst employees = [...allRows].splice(1);\n\nemployees.pop();\n\ntableHead.addEventListener('click', e => {\n  switch (e.target.innerText) {\n    case 'Salary':\n      employees.sort((employee1, employee2) => {\n        return convertToNumber(employee1.children[3].innerText)\n          > convertToNumber(employee2.children[3].innerText) ? 1 : -1;\n      });\n      break;\n\n    case 'Age':\n      employees.sort((employee1, employee2) => {\n        return +employee1.children[2].innerText\n          > +employee2.children[2].innerText ? 1 : -1;\n      });\n      break;\n\n    case 'Position':\n      employees.sort((employee1, employee2) => {\n        return employee1.children[1].innerText\n          .localeCompare(employee2.children[1].innerText);\n      });\n      break;\n\n    case 'Name':\n      employees.sort((employee1, employee2) => {\n        return employee1.children[0].innerText\n          .localeCompare(employee2.children[0].innerText);\n      });\n      break;\n  }\n\n  tableBody.innerHTML = `\n      ${employees.map(element => `\n        <tr>\n          <td>${element.children[0].innerText}</td>\n          <td>${element.children[1].innerText}</td>\n          <td>${element.children[2].innerText}</td>\n          <td>${element.children[3].innerText}</td>\n        </tr>\n      `).join('')}\n    `;\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","convertToNumber","text","replace","tableHead","document","querySelector","tableBody","employees","_to_consumable_array","_array_without_holes","isArray","querySelectorAll","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","splice","pop","addEventListener","e","target","innerText","sort","employee1","employee2","children","localeCompare","innerHTML","concat","map","element","join"],"version":3,"file":"index.15b27a2d.js.map"}